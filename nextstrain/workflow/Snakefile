""" 
Snakemake pipeline for the nextstrain analysis of CHIKV.
Author: Will Hannon 
"""

#### ----------------------- Imports ----------------------- ####

import pandas as pd 
import json
from os.path import join
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

#### -------------------- Configuration -------------------- ####

configfile: "configuration/pipeline.yaml"

#### ----------------------- Targets ----------------------- ####

rule all:
    input:
        join(config['auspice_dir'], "auspice.json")

#### ------------------------ Rules ------------------------ ####


rule make_reference:
    """
    Make a reference GenBank from a CDS for Nextstrain.
    """
    output: 
        join(config['reference_dir'], "reference.gb")
    params:
        feature=config['feature'],
        name=config['name'],
        reference=config['accessions']['library'],
    conda: "nextstrain"
    log: join(config['log_dir'], "make-reference.log")
    shell:
        """
        python workflow/scripts/make-reference.py \
            --reference {params.reference} \
            --product "{params.feature}" \
            --name "{params.name}" \
            --output {output} \
            &>> {log}
        """


rule download_records:
    """
    Download all sequence records from GenBank.
    """
    input: 
        config['accessions']['all']
    output: 
        join(config['sequence_dir'], "records.pickle")
    params:
        include=config['accessions']['include'],
    conda: "nextstrain"
    log: join(config['log_dir'], "download-records.log")
    shell:
        """
        python workflow/scripts/download-records.py \
            --accessions {input} \
            --include {params.include} \
            --output {output} \
            &>> {log}
        """


rule parse_feature:
    """
    Parse the target sequence feature from all sequences using alignment.
    """
    input: 
        join(config['sequence_dir'], "records.pickle")
    output: 
        join(config['sequence_dir'], "parsed_features.csv")
    params:
        feature=config['feature'],
        reference=config['accessions']['library'],
    conda: "nextstrain"
    log: join(config['log_dir'], "parse-feature.log")
    shell:
        """
        python workflow/scripts/parse-feature.py \
            --input {input} \
            --feature "{params.feature}" \
            --reference {params.reference} \
            --output {output} \
            &>> {log}
        """


rule filter_records:
    """
    Filter the records base on feature alignment.
    """
    input: 
        features=join(config['sequence_dir'], "parsed_features.csv"),
        records=join(config['sequence_dir'], "records.pickle")
    output: 
        join(config['sequence_dir'], "filtered_features.csv")
    params:
        include=config['accessions']['include'],
        outgroup=config['accessions']['outgroup'],
        min_feature_length=config['filter']['min_feature_length'],
        max_feature_length=config['filter']['max_feature_length'],
        max_ambiguous_positions=config['filter']['max_ambiguous_positions'],
        remove_duplicates=config['filter']['remove_duplicates'],
        remove_partial=config['filter']['remove_partial'],
        remove_incomplete=config['filter']['remove_incomplete'],
        min_alignment_score=config['filter']['min_alignment_score'],
    conda: "nextstrain"
    log: join(config['log_dir'], "filter-records.log")
    shell:
        """
        python workflow/scripts/filter-records.py \
            --features {input.features} \
            --records {input.records} \
            --include {params.include} \
            --outgroup {params.outgroup} \
            --min_feature_length {params.min_feature_length} \
            --max_feature_length {params.max_feature_length} \
            --max_ambiguous_positions {params.max_ambiguous_positions} \
            --remove_duplicates {params.remove_duplicates} \
            --remove_partial {params.remove_partial} \
            --min_alignment_score {params.min_alignment_score} \
            --output {output} \
            &>> {log}
        """


rule extract_metadata:
    """
    Extract the metadata for the filtered accessions.
    """
    input: 
        records=join(config['sequence_dir'], "records.pickle"),
        filtered=join(config['sequence_dir'], "filtered_features.csv")
    output: 
        join(config['metadata_dir'], "metadata.csv")
    params:
        country_mapping=json.dumps(json.dumps(config['country_mapping'])),
        host_mapping=json.dumps(json.dumps(config['host_mapping'])),
        virus=config['virus'],
    conda: "nextstrain"
    log: join(config['log_dir'], "extract-metadata.log")
    shell:
        """
        python workflow/scripts/extract-metadata.py \
            --records {input.records} \
            --filtered {input.filtered} \
            --virus {params.virus} \
            --country_mapping {params.country_mapping} \
            --host_mapping {params.host_mapping} \
            --output {output} \
            &>> {log}
        """

 
rule extract_sequences:
    """
    Extract the nucleotide sequences from the filtered accessions.
    """
    input: 
        join(config['sequence_dir'], "filtered_features.csv")
    output: 
        join(config['sequence_dir'], "nucleotide.fa")
    run:
        df = pd.read_csv(input[0])
        records = []
        for idx, row in df.iterrows():
            record = SeqRecord(
                Seq(row['sequence']),
                id=row['accession'],
                description=""
            )
            records.append(record)
        SeqIO.write(records, output[0], "fasta")


rule extract_translations:
    """
    Extract the protein sequences from the filtered accessions.
    """
    input: 
        join(config['sequence_dir'], "filtered_features.csv")
    output: 
        join(config['sequence_dir'], "protein.fa")
    run:
        df = pd.read_csv(input[0])
        records = []
        for idx, row in df.iterrows():
            record = SeqRecord(
                Seq(row['translation']),
                id=row['accession'],
                description=""
            )
            records.append(record)
        SeqIO.write(records, output[0], "fasta")


rule align_nucleotides:
    """
    Align the nucleotide sequences using MAFFT.
    """
    input: 
        join(config['sequence_dir'], "nucleotide.fa")
    output:
        join(config['align_dir'], "nucleotide.fa")
    conda: "nextstrain"
    log: join(config['log_dir'], "align-nucleotides.log")
    shell:
        """
        mafft --auto {input} > {output} 2>> {log}
        """


rule align_proteins:
    """
    Align the protein sequences using MAFFT.
    """
    input: 
        join(config['sequence_dir'], "protein.fa")
    output:
        join(config['align_dir'], "protein.fa")
    conda: "nextstrain"
    log: join(config['log_dir'], "align-proteins.log")
    shell:
        """
        mafft --auto {input} > {output} 2>> {log}
        """


rule align_codons:
    """
    Create a codon alignment from the protein alignment.
    """
    input: 
        sequences=join(config['sequence_dir'], "nucleotide.fa"),
        alignment=join(config['align_dir'], "protein.fa")
    output:
        join(config['align_dir'], "codon.fa")
    conda: "nextstrain"
    log: join(config['log_dir'], "align-codons.log")
    shell:
        """
        python workflow/scripts/align-codons.py \
            --alignment {input.alignment} \
            --sequences {input.sequences} \
            --output {output} \
            &>> {log}
        """


rule build_tree:
    """
    Build a phylogenetic tree from the codon alignments.
    """
    input:
        join(config['align_dir'], "codon.fa")
    output:
        join(config['tree_dir'], "tree_raw.nwk")
    params:
        outgroup=config['accessions']['outgroup'],
    conda: "nextstrain"
    log: join(config['log_dir'], "build-tree.log")
    shell:
        """
        augur tree \
            --alignment {input} \
            --tree-builder-args '\-o {params.outgroup}' \
            --output {output} \
            &> {log}
        """


rule root_and_remove_outgroup:
    """
    Root the tree and remove the outgroup
    """
    input:
        tree=join(config['tree_dir'], "tree_raw.nwk"),
        protein=join(config['align_dir'], "protein.fa"),
        codon=join(config['align_dir'], "codon.fa"),
    output:
        tree=join(config['tree_dir'], "tree_no_outgroup.nwk"),
        protein=join(config['align_dir'], "protein_no_outgroup.fa"),
        codon=join(config['align_dir'], "codon_no_outgroup.fa")    
    params:
        outgroup=config['accessions']['outgroup'],
    conda: "nextstrain"
    log: join(config['log_dir'], "root-and-remove-outgroup.log")
    shell:
        """
        python workflow/scripts/root-and-remove-outgroup.py \
            --tree {input.tree} \
            --protein {input.protein} \
            --codon {input.codon} \
            --outgroup {params.outgroup} \
            --output_tree {output.tree} \
            --output_protein {output.protein} \
            --output_codon {output.codon} \
            &> {log}
        """


rule refine_tree_sequences:
    """
    Refine the tree sequences using augur refine.
    """
    input:
        tree=join(config['tree_dir'], "tree_no_outgroup.nwk"),
        codon=join(config['align_dir'], "codon_no_outgroup.fa"),
        metadata=join(config['metadata_dir'], "metadata.csv"),  
    output:
        tree=join(config['tree_dir'], "tree.nwk"),
        nodes=join(config['tree_dir'], "tree_nodes.json"),
    conda: "nextstrain"
    log: join(config['log_dir'], "refine-tree-sequences.log")
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.codon} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.nodes} \
            --keep-root \
            --verbosity 2 \
            &> {log}
        """


rule traits_tree_sequences:
    """
    This rule gets traits from the tree
    """
    input:
        tree=join(config['tree_dir'], "tree.nwk"),
        metadata=join(config['metadata_dir'], "metadata.csv"),  
    output:
        tree_traits=join(config['tree_dir'], "tree_traits.json"),
    conda: "nextstrain"
    log: join(config['log_dir'], "traits-tree-sequences.log")
    shell:
        """
        augur traits \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --metadata-delimiters "," \
            --metadata-id-columns name \
            --output-node-data {output.tree_traits} \
            --columns subregion \
            --confidence \
            &> {log}
        """


rule ancestral_tree_sequences:
    """
    Reconstruct the ancestral sequences from the tree
    """
    input:
        tree=join(config['tree_dir'], "tree.nwk"),
        codon=join(config['align_dir'], "codon_no_outgroup.fa"),
    output:
        ancestral=join(config['tree_dir'], "tree_muts.json"),
    conda: "nextstrain"
    log: join(config['log_dir'], "ancestral-tree-sequences.log")
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.codon} \
            --output-node-data {output.ancestral} \
            --inference joint \
            &> {log}
        """


rule translate_tree_sequences:
    """
    Identifies amino-acid mutations from tree
    """
    input:
        tree=join(config['tree_dir'], "tree.nwk"),
        ancestral=join(config['tree_dir'], "tree_muts.json"),
        reference=join(config['reference_dir'], "reference.gb")
    output:
        translation=join(config['tree_dir'], "tree_aa_muts.json"),
        gene_alignments=expand(join(config['align_dir'], "{genes}.fasta"), genes=config['genes'])
    params:
        genes=config['genes'],
    conda: "nextstrain"
    log: join(config['log_dir'], "translate-tree-sequences.log")
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.ancestral} \
            --reference-sequence {input.reference} \
            --output-node-data {output.translation} \
            --genes {params.genes} \
            --alignment-output results/alignments/%GENE.fasta \
            &> {log}
        """


rule color_traits:
    """
    Assign color schemes to traits in the tree.
    """
    input:
        schemes=config["color"]["scheme"],
        metadata=join(config['metadata_dir'], "metadata.csv"),  
    output:
        join(config['tree_dir'], "colors.tsv"),
    params:
        traits=config['color']['traits'],
    conda: "nextstrain"
    log: join(config['log_dir'], "color-traits.log")
    shell:
        """
        python workflow/scripts/color-traits.py \
            --metadata {input.metadata} \
            --schemes {input.schemes} \
            --traits {params.traits} \
            --output {output} \
            &> {log}
        """


rule export_tree:
    """
    Exports the tree to visualize with Auspice
    """
    input:
        tree=join(config['tree_dir'], "tree.nwk"),
        metadata=join(config['metadata_dir'], "metadata.csv"),  
        nodes=join(config['tree_dir'], "tree_nodes.json"),
        traits=join(config['tree_dir'], "tree_traits.json"),
        ancestral=join(config['tree_dir'], "tree_muts.json"),
        translation=join(config['tree_dir'], "tree_aa_muts.json"),
        colors=join(config['tree_dir'], "colors.tsv"),
        config=config["auspice"]["config"],
        coordinates=config["auspice"]["coordinates"],
    params:
        title=config["auspice"]["title"],
        description=config["auspice"]["description"],
    output:
        join(config['auspice_dir'], "auspice.json"),
    conda: "nextstrain"
    log: join(config['log_dir'], "export-tree.log")
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --title "{params.title}" \
            --description "{params.description}" \
            --metadata {input.metadata} \
            --node-data {input.nodes} {input.traits} {input.ancestral} {input.translation} \
            --include-root-sequence-inline \
            --colors {input.colors} \
            --lat-longs {input.coordinates} \
            --auspice-config {input.config} \
            --output {output} \
            &> {log}
        """
