""" 
Snakemake pipeline for the nextstrain analysis of CHIKV.
Author: Will Hannon 
"""

#### ----------------------- Imports ----------------------- ####

import pandas as pd 
from os.path import join

#### -------------------- Configuration -------------------- ####

configfile: "configuration/pipeline.yaml"

#### ----------------------- Targets ----------------------- ####

rule all:
    input:
        join(config['sequence_dir'], "sequence_metadata.csv")

#### ------------------------ Rules ------------------------ ####

rule download_and_parse_sequences:
    """
    Download and parse all sequences and metadata from Genbank.
    """
    input: 
        config['accessions']['all']
    output: 
        join(config['sequence_dir'], "sequence_metadata.csv")
    params:
        feature=config['feature'],
        reference=config['accessions']['library'],
        include=[config['accessions']['outgroup'], config['accessions']['reference']]
    conda: "nextstrain"
    log: join(config['log_dir'], "download_and_parse_sequences.log")
    shell:
        """
        python workflow/scripts/download-and-parse-sequences.py \
            --accessions {input} \
            --feature "{params.feature}" \
            --reference {params.reference} \
            --include {params.include} \
            --output {output} \
            &>> {log}
        """


# rule filter_sequences:
#     """
#     Filter sequences based on metadata and quality.
#     """
#     input:
#         join(config['sequence_dir'], "sequence_metadata.csv")
#     output:
#         csv=join(config['sequence_dir'], "filtered_sequences.csv"),
#         nucleotide=join(config['sequence_dir'], "nucleotide.fa"),
#         protein=join(config['sequence_dir'], "protein.fa")
#     params:
#         min_genome_size=config['filter']['min_genome_size'],
#         max_genome_size=config['filter']['max_genome_size'],
#         min_feature_size=config['filter']['min_feature_size'],
#         max_feature_size=config['filter']['max_feature_size'],
#         min_genome_ambiguity=config['filter']['min_genome_ambiguity'],
#         min_feature_ambiguity=config['filter']['min_feature_ambiguity'],
#         min_alignment_score=config['filter']['min_alignment_score'],
#         remove_duplicates=config['filter']['remove_duplicates'],
#     conda: "nextstrain"
#     log: join(config['log_dir'], "filter_sequences.log")
#     shell:
#         """
#         python workflow/scripts/filter-sequences.py \
#             --input {input} \
#             --output-csv {output.csv} \
#             --output-nucleotide {output.nucleotide} \
#             --output-protein {output.protein} \
#             --min-genome-size {params.min_genome_size} \
#             --max-genome-size {params.max_genome_size} \
#             --min-feature-size {params.min_feature_size} \
#             --max-feature-size {params.max_feature_size} \
#             --min-genome-ambiguity {params.min_genome_ambiguity} \
#             --min-feature-ambiguity {params.min_feature_ambiguity} \
#             --min-alignment-score {params.min_alignment_score} \
#             --remove-duplicates {params.remove_duplicates} \
#             &>> {log}
#         """