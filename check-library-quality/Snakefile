"""Pipeline to check the quality of CHIKV GenScript library."""
#### ----------------------- Imports ----------------------- ####

import pandas as pd 
from os.path import join
import Bio.SeqIO   

#### -------------------- Configuration -------------------- ####

configfile: "config.yaml"

#### ----------------------- Targets ----------------------- ####

pacbio_df = pd.read_csv(config['runs'])

rule all:
    input:
        expand("results/process_ccs/{run}", run=pacbio_df["run"])

#### ------------------------ Rules ------------------------ ####

rule clean:
    shell:
        """
        rm -rf logs/
        rm -rf tmp/
        rm -f slurm*.out
        """

localrules: gene_sequence, translate_geneseq

rule gene_sequence:
    """Get sequence of gene from PacBio amplicon."""
    input:
        gb = join(config['data_dir'], "{design}_amplicon.gb"),
    output:
        codon = join(config['gene_dir'], "{design}_codon.fasta"),
    run:
        amplicon = Bio.SeqIO.read(input.gb, "genbank")
        gene_feature = [f for f in amplicon.features if f.type == "gene"]
        if len(gene_feature) != 1:
            raise ValueError("failed to find exactly one feature of type 'gene'")
        geneseq = gene_feature[0].extract(amplicon).seq
        print(f"Found gene of length {len(geneseq)}")
        print(f"Writing to {output.codon}")
        with open(output.codon, "w") as f:
            f.write(f">gene\n{str(geneseq)}\n")


rule translate_geneseq:
    """Translate gene sequence into protein sequence."""
    input:
        codon = join(config['gene_dir'], "{design}_codon.fasta"),
    output:
        protein = join(config['gene_dir'], "{design}_protein.fasta"),
    run:     
        gene = Bio.SeqIO.read(input.codon, "fasta").seq
        if len(gene) % 3 != 0:
            raise ValueError(f"{len(gene)} is not divisible by 3")
        protseq = gene.translate()
        assert len(protseq) == len(gene) // 3
        if "*" in protseq[:-1]:
            raise ValueError(f"Premature stop codon in protein:\n{protseq}")
            
        with open(output.protein, "w") as f:
            f.write(f">gene\n{str(protseq)}\n")


rule align_parse_PacBio_ccs:
    """Align and parse PacBio CCS FASTQ file."""
    input:
        fastq = lambda wc: pacbio_df.set_index("run").at[wc.run, "fastq"],
        amplicon = lambda wc: join(config['data_dir'], pacbio_df.set_index("run").at[wc.run, "design"] + "_amplicon.gb"),
        specs = lambda wc: join(config['data_dir'], pacbio_df.set_index("run").at[wc.run, "design"] + "_feature_parse_specs.yaml"),
    output:
        outdir = directory("results/process_ccs/{run}"),
    conda:
        "../dms-vep-pipeline-3/environment.yml"
    log:
        "results/logs/align_parse_PacBio_ccs_{run}.txt",
    script:
        "scripts/align_parse_PacBio_ccs.py"


# rule analyze_pacbio_ccs:
#     """Analyze PacBio CCSs and get ones that align to amplicons of interest."""
#     input:
#         expand(
#             rules.align_parse_PacBio_ccs.output.outdir,
#             pacbioRun=pacbio_runs["run"],
#         ),
#         config["pacbio_amplicon"],
#         config["pacbio_amplicon_specs"],
#         nb=os.path.join(
#             config["pipeline_path"], "notebooks/analyze_pacbio_ccs.ipynb"
#         ),
#     output:
#         csv="results/process_ccs/CCSs_aligned_to_amplicon.csv",
#         nb="results/notebooks/analyze_pacbio_ccs.ipynb",
#     conda:
#         "environment.yml"
#     log:
#         "results/logs/analyze_pacbio_ccs.txt",
#     shell:
#         "papermill {input.nb} {output.nb} &> {log}"


# rule build_pacbio_consensus:
#     """Build PacBio consensus sequences for barcodes."""
#     input:
#         rules.analyze_pacbio_ccs.output.csv,
#         config["gene_sequence_codon"],
#         nb=os.path.join(
#             config["pipeline_path"], "notebooks/build_pacbio_consensus.ipynb"
#         ),
#     output:
#         nt_variants="results/variants/nt_variants.csv",
#         nb="results/notebooks/build_pacbio_consensus.ipynb",
#     params:
#         config["max_ccs_error_rate"],
#         config["consensus_params"],
#     conda:
#         "environment.yml"
#     log:
#         "results/logs/build_pacbio_consensus.txt",
#     shell:
#         "papermill {input.nb} {output.nb} &> {log}"


# rule build_codon_variants:
#     """Build codon-variant table."""
#     input:
#         rules.build_pacbio_consensus.output.nt_variants,
#         config["gene_sequence_codon"],
#         config["gene_sequence_protein"],
#         config["site_numbering_map"],
#         config["mutation_design_classification"]["csv"],
#         config["neut_standard_barcodes"],
#         nb=os.path.join(
#             config["pipeline_path"], "notebooks/build_codon_variants.ipynb"
#         ),
#     output:
#         config["codon_variants"],
#         nb="results/notebooks/build_codon_variants.ipynb",
#     params:
#         config["mutation_design_classification"],
#     conda:
#         "environment.yml"
#     log:
#         "results/logs/build_codon_variants.txt",
#     shell:
#         "papermill {input.nb} {output.nb} &> {log}"